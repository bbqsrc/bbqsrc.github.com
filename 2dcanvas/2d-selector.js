// Generated by CoffeeScript 1.3.1
(function() {

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  };

  this.CrosshairSelector = Backbone.View.extend({
    className: "crosshair-selector",
    height: 200,
    width: 200,
    dotSize: 10,
    notchSpacing: 10,
    notchWidth: 10,
    _bgState: true,
    _mouseState: false,
    _lastColourPoint: "#000000",
    _ensureBetween: function(num, min, max) {
      return Math.max(min, Math.min(num, max));
    },
    _mousePosition: function(node, e) {
      var x, y;
      x = parseInt(e.pageX - $(node).offset().left, 10);
      y = parseInt(e.pageY - $(node).offset().top, 10);
      x = Math.max(0, Math.min(x, node.width));
      y = Math.max(0, Math.min(y, node.height));
      return [x, y];
    },
    _getImageData: function(ctx, node) {
      var a, b, g, r, x, y, _ref;
      x = Math.max(0, Math.min(this._coords.x, node.width - 1));
      y = Math.max(0, Math.min(this._coords.y, node.height - 1));
      _ref = ctx.getImageData(x, y, 1, 1).data, r = _ref[0], g = _ref[1], b = _ref[2], a = _ref[3];
      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    },
    _generateCross: function() {
      var ctx, end, height, i, j, node, origin, start, width;
      node = this.$('.ch')[0];
      ctx = node.getContext('2d');
      height = node.height;
      width = node.width;
      origin = [node.width / 2, node.height / 2];
      ctx.save();
      ctx.clearRect(0, 0, node.width, node.height);
      ctx.lineWidth = 2;
      if (this._bgState) {
        ctx.strokeStyle = this._lastColourPoint;
      }
      ctx.beginPath();
      ctx.moveTo(width / 2, 0);
      ctx.lineTo(width / 2, height);
      ctx.moveTo(0, height / 2);
      ctx.lineTo(width, height / 2);
      i = j = origin[0];
      start = origin[1] - this.notchWidth / 2;
      end = origin[1] + this.notchWidth / 2;
      while (i <= width) {
        i += this.notchSpacing;
        j -= this.notchSpacing;
        ctx.moveTo(i, start);
        ctx.lineTo(i, end);
        ctx.moveTo(j, start);
        ctx.lineTo(j, end);
      }
      i = j = origin[1];
      start = origin[0] - this.notchWidth / 2;
      end = origin[0] + this.notchWidth / 2;
      while (i <= height) {
        i += this.notchSpacing;
        j -= this.notchSpacing;
        ctx.moveTo(start, i);
        ctx.lineTo(end, i);
        ctx.moveTo(start, j);
        ctx.lineTo(end, j);
      }
      ctx.stroke();
      ctx.restore();
    },
    _generateBackground: function() {
      var bg, ctx, height, horizontalGradient, origin, verticalGradient, width;
      bg = this.$('.bg')[0];
      ctx = bg.getContext('2d');
      height = bg.height;
      width = bg.width;
      origin = [bg.width / 2, bg.height / 2];
      horizontalGradient = ctx.createLinearGradient(0, 0, width, 0);
      horizontalGradient.addColorStop(0, "#00ff00");
      horizontalGradient.addColorStop(1, "#ff0000");
      verticalGradient = ctx.createLinearGradient(0, 0, 0, height);
      verticalGradient.addColorStop(0, "rgba(220,220,220,0)");
      verticalGradient.addColorStop(1, "rgba(220,220,220,0.9)");
      ctx.save();
      ctx.fillStyle = horizontalGradient;
      ctx.fillRect(0, 0, width, height);
      ctx.fillStyle = verticalGradient;
      ctx.fillRect(0, 0, width, height);
      ctx.restore();
    },
    _setCrosshair: function() {
      var bg, bgCtx, ctx, fg, x, y;
      fg = this.$(".fg")[0];
      bg = this.$(".bg")[0];
      ctx = fg.getContext('2d');
      bgCtx = bg.getContext('2d');
      this._lastColourPoint = this._getImageData(bgCtx, fg);
      this._generateCross();
      ctx.clearRect(0, 0, fg.width, fg.height);
      ctx.beginPath();
      x = this._coords.x;
      y = this._coords.y;
      ctx.moveTo(x - this.dotSize, y);
      ctx.lineTo(x + this.dotSize, y);
      ctx.moveTo(x, y - this.dotSize);
      ctx.lineTo(x, y + this.dotSize);
      ctx.stroke();
      this._heatmap.store.addDataPoint(x, y);
      this._setCoordText();
      return this._coords;
    },
    _setCoords: function(x, y) {
      return this._coords = {
        x: x,
        y: y
      };
    },
    _setCoordText: function() {
      var availableWidth, howMuchIAgree, howMuchICare, node, textCtx, textSize;
      if (this._coords == null) {
        return;
      }
      node = this.$(".ch")[0];
      textCtx = node.getContext('2d');
      textSize = node.height / 20;
      availableWidth = node.width / 2 - this.notchWidth / 2;
      howMuchIAgree = node.width / 2 - this._coords.x;
      howMuchICare = node.height - this._coords.y;
      textCtx.clearRect(0, 0, availableWidth, textSize * 2);
      textCtx.font = "" + textSize + "px monospace";
      textCtx.textBaseline = "top";
      return textCtx.fillText("(" + howMuchIAgree + ", " + howMuchICare + ")", 3, 3);
    },
    _setGlobalEvents: function() {
      var self;
      self = this;
      $(window).on("mouseup", function(e) {
        return (function(e) {
          if (!this._mouseState) {
            return;
          }
          this._mouseState = false;
          return $(".canvas-filter").remove();
        }).call(self, e);
      });
      $(window).on("mousemove", function(e) {
        return (function(e) {
          var x, y, _ref;
          if (!this._mouseState) {
            return;
          }
          e.preventDefault();
          _ref = this._mousePosition(this.$(".fg")[0], e), x = _ref[0], y = _ref[1];
          this._setCoords(x, y);
          this._setCrosshair();
          return this.onSet.call(this, e);
        }).call(self, e);
      });
    },
    events: {
      "mousedown": function(e) {
        var x, y, _ref;
        this._mouseState = true;
        $('body').append($('<div class="canvas-filter"></div>'));
        this.$(".fg").addClass('moving');
        e.preventDefault();
        _ref = this._mousePosition(this.$(".fg")[0], e), x = _ref[0], y = _ref[1];
        this._setCoords(x, y);
        return this._setCrosshair();
      }
    },
    template: _.template("<canvas class='bg' height=\"{{height}}\" width=\"{{width}}\"></canvas>\n<canvas class='ch' height=\"{{height}}\" width=\"{{width}}\"></canvas>\n<canvas class='fg' height=\"{{height}}\" width=\"{{width}}\"></canvas>"),
    initialize: function(obj) {
      if (obj == null) {
        obj = {};
      }
      if (obj.height != null) {
        this.height = parseInt(obj.height, 10);
      }
      if (obj.width != null) {
        this.width = parseInt(obj.width, 10);
      }
      if (obj.dotSize != null) {
        this.dotSize = parseInt(obj.dotSize, 10);
      }
      if (obj.notchSpacing != null) {
        this.notchSpacing = parseInt(obj.notchSpacing, 10);
      }
      if (obj.onSet != null) {
        this.onSet = obj.onSet;
      }
    },
    showBackground: function() {
      this._bgState = true;
      this.$(".bg").show();
      return this._generateCross();
    },
    hideBackground: function() {
      this._bgState = false;
      this.$(".bg").hide();
      return this._generateCross();
    },
    setHeatmapData: function(data) {
      return this._heatmap.store.setDataSet(data);
    },
    showHeatmap: function() {
      return $(this._heatmap.get('canvas')).show();
    },
    hideHeatmap: function() {
      return $(this._heatmap.get('canvas')).hide();
    },
    onSet: function(event) {},
    set: function(agree, care) {
      var node, x_diff, y_diff;
      node = this.$(".ch")[0];
      x_diff = node.width / 100;
      y_diff = node.height / 100;
      this._coords = {
        x: node.width / 2 - x_diff * this._ensureBetween(agree, -50, 50),
        y: node.height - y_diff * this._ensureBetween(care, 0, 100)
      };
      this._setCrosshair();
      this.onSet.call(this);
    },
    get: function() {
      var agree, care, modH, modW, node;
      if (this._coords == null) {
        return null;
      }
      node = this.$(".ch")[0];
      modW = node.width / 100;
      modH = node.height / 100;
      care = (node.height - this._coords.y) / modH;
      agree = (node.width / 2 - this._coords.x) / modW;
      return [agree, care];
    },
    render: function() {
      this.$el.empty().append(this.template({
        height: this.height,
        width: this.width
      })).css({
        height: this.height,
        width: this.width
      });
      this.$el.children().css({
        height: this.height,
        width: this.width
      });
      this._generateBackground();
      this._generateCross();
      this._setGlobalEvents();
      this._heatmap = h337.create({
        element: this.el,
        radius: 8,
        visible: false
      });
      this._heatmap.get('canvas').style.zIndex = 0;
      return this;
    }
  });

}).call(this);
